{
  "version": 3,
  "sources": ["../../../../../../Users/nico/Documents/currency-service/netlify/functions/fx-quote.js", "../../../../../../Users/nico/Documents/currency-service/src/rateProvider.js", "../../../../../../Users/nico/Documents/currency-service/netlify/functions/lib/prisma.js"],
  "sourceRoot": "/var/folders/dz/zy3th9bd18z7_5sjgj8jrymr0000gn/T/tmp-13120-SuqWp2eqC9nS",
  "sourcesContent": ["import { fetchRate } from \"../../src/rateProvider.js\";\nimport { prisma } from \"./lib/prisma.js\";\n\nconst TZ = \"America/Montevideo\";\n\nexport const handler = async (event) => {\n  try {\n    const q = event.queryStringParameters ?? {};\n    const from = String(q.from || \"\").toUpperCase();\n    const to = String(q.to || \"\").toUpperCase();\n    const amount = Number(q.amount || \"0\");\n\n    const isCurrency = (c) => /^[A-Z]{3}$/.test(c);\n    if (!isCurrency(from) || !isCurrency(to)) {\n      return text(400, \"Par\u00E1metros 'from' y 'to' deben ser ISO 4217 (p.ej., UYU, USD).\");\n    }\n    if (!Number.isFinite(amount) || amount <= 0) {\n      return text(400, \"El par\u00E1metro 'amount' debe ser un n\u00FAmero > 0.\");\n    }\n    if (from === to) {\n      return text(400, \"Las monedas 'from' y 'to' no pueden ser iguales.\");\n    }\n\n    const { rate, providerTimestamp, providerName } = await fetchRate(from, to);\n    const received = Math.round((amount * rate + Number.EPSILON) * 100) / 100;\n\n    const localTime = new Intl.DateTimeFormat(\"es-UY\", {\n      dateStyle: \"full\",\n      timeStyle: \"short\",\n      timeZone: TZ\n    }).format(new Date(providerTimestamp));\n\n    const clientIp = (event.headers[\"x-forwarded-for\"] || \"\").split(\",\")[0].trim() || null;\n    const userAgent = event.headers[\"user-agent\"] || null;\n\n\n    try {\n      const created = await prisma.fxLog.create({\n        data: {\n          fromCurrency: from,\n          toCurrency: to,\n          amount,\n          rate,\n          received,\n          provider: providerName,\n          providerTimestamp,\n          clientIp,\n          userAgent\n        }\n      });\n      console.log(\"FX log insertado:\", created.id, from, to, amount, rate);\n    } catch (e) {\n      console.error(\"Error al insertar FX log:\", e?.message, e);\n    }\n\n    return text(200, `\nConversi\u00F3n de ${amount} ${from} a ${to}\n\n- Tasa: ${rate}\n- Recibir\u00EDas: ${received} ${to}\n- Fuente: ${providerName}\n- \u00DAltima actualizaci\u00F3n: ${localTime}\n`);\n  } catch (err) {\n    console.error(\"Handler error:\", err);\n    return text(502, \"No se pudo obtener el tipo de cambio en este momento.\");\n  }\n};\n\nfunction text(status, body) {\n  return {\n    statusCode: status,\n    headers: { \"content-type\": \"text/plain; charset=utf-8\" },\n    body\n  };\n}\n", "export async function fetchRate(from, to) {\n  const base = String(from).toUpperCase();\n  const quote = String(to).toUpperCase();\n\n  const url = `https://open.er-api.com/v6/latest/${encodeURIComponent(base)}`;\n\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(`FX provider error: ${res.status} ${res.statusText}`);\n  }\n\n  const data = await res.json();\n\n  if (data.result !== \"success\") {\n    throw new Error(`FX provider returned error: ${data[\"error-type\"] || \"unknown\"}`);\n  }\n\n  const rate = data.rates?.[quote];\n  if (typeof rate !== \"number\") {\n    throw new Error(`No hay tasa para ${base} -> ${quote}`);\n  }\n\n  return {\n    rate,\n    providerTimestamp: data.time_last_update_utc,  \n    providerName: \"ExchangeRate-API (open.er-api.com)\"\n  };\n}\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet prisma = globalThis.__PRISMA__;\nif (!prisma) {\n  prisma = new PrismaClient();\n  prisma.$connect().catch((e) => {\n    console.error(\"Prisma $connect error:\", e);\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    globalThis.__PRISMA__ = prisma;\n  }\n}\nexport { prisma };\n"],
  "mappings": "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",
  "names": []
}
